"""Controllers for Flask-RESTful resources: handle the business logic for the endpoint."""
import json
from operator import itemgetter

import requests
from flask import current_app
from flask_api import status

from application.exceptions.exception_critical_path import UltsysUserGetUserPathError
from application.exceptions.exception_ultsys_user import UltsysUserBadRequestError
from application.exceptions.exception_ultsys_user import UltsysUserHTTPStatusCodeError
from application.exceptions.exception_ultsys_user import UltsysUserInternalServerError
from application.exceptions.exception_ultsys_user import UltsysUserNotFoundError
# pylint: disable=bare-except
# flake8: noqa:E722


def create_user( user_parameters ):
    """Function to create a user using the Drupal user service.

    Called internally, and has no endpoint. Probably the minimum set of fields required: missing password and
    username.

    user_parameters = {
        "action": "create",
        "firstname": "Alex",
        "lastname": "Abacrombie",
        "zip": "22202",
        "city": "Arlington",
        "state": "VA",
        "email": "alex@aol.com",
        "phone": "7035555555"
    }

    :param dict user_parameters: a dictionary of user parameters needed to create both the Drupal and Ultsys user.
    :return: The new Drupal UID.
    """

    drupal_api_key = current_app.config[ 'ULTSYS_CREATE_API_KEY' ]
    drupal_url = current_app.config[ 'ULTSYS_USER_CREATE_SERVICE' ]
    headers = { 'content-type': 'application/json', 'api-key': drupal_api_key }

    request = requests.post(
        drupal_url,
        data=json.dumps( user_parameters ),
        headers=headers
    )
    raise_error( request )
    drupal_uid = request.json()[ 'uid' ]

    return drupal_uid


def update_ultsys_user( user, gross_gift_amount ):
    """Function to update an Ultsys user through the Ultsys user service.

    :param dict user: Application user dictionary.
    :param dict gross_gift_amount: Gross gift amount.
    :return: Http status code.
    """

    # Build the payload for the update endpoint.
    user_parameters = {
        'id': user[ 'id' ],
        'donation_amount': gross_gift_amount
    }
    drupal_api_key_parameter = 'apikey={}'.format( current_app.config[ 'ULTSYS_API_KEY' ] )
    url_with_api_key = '{}?{}'.format( current_app.config[ 'ULTSYS_USER_UPDATE_SERVICE' ], drupal_api_key_parameter )
    headers = { 'content-type': 'application/json' }
    request = requests.post(
        url_with_api_key,
        params=user_parameters,
        headers=headers
    )
    raise_error( request )
    return status.HTTP_200_OK


def find_ultsys_user( query_parameters ):
    """Simple query to returns a list of sorted user dictionaries from the Drupal user service.

    The payload is:

    query_parameters = {
        "action": "find",
        "search_terms": search_terms,
        "sort_terms": sort_terms
    }

    Refer to get_ultsys_user() and sort_ultsys_user() for search_terms, and sort_terms respectively.

    :param dict query_parameters: A dictionary with information for the retrieval and sorting of users.
    :return: A list of dictionaries containing unsorted/sorted users.
    """

    request = get_ultsys_user( query_parameters[ 'search_terms' ] )
    # The request.content is offered up in ISO-8859-1, and so in json.loads() use ISO-8859-1 as the encoding.
    # json.loads() will convert this to unicode by default.
    if request.status_code not in [ 200, 404 ]:
        raise_error( request )
    elif request.status_code == 200:
        ultsys_user_data = request.content.decode( 'ISO-8859-1' )
        ultsys_user_data = json.loads( ultsys_user_data, encoding='ISO-8859-1' )
        ultsys_user_data = sort_ultsys_user( ultsys_user_data, query_parameters[ 'sort_terms' ] )
        return ultsys_user_data
    return []


def get_ultsys_user( search_terms ):
    """The get request for retrieving ultsys user data.

    The search is done by Drupal and the search terms are any column names on a user. Filters are provided for
    each query term. The following examples illustrate the URL generated by the payload:

    "search_terms": {
        "firstname": { "in": [ "Bob", "Robert" ] },
        "lastname": {"like": "%Smith%"},
        "donation_prior_amount": { "ge": "10.00", "lt": "100.00" },
        "state": { "in": [ "AK", "CA" ] }
    }

    In the query_parameters[ "sort_terms" ] we need to use a list to preserve the order of sorting.

    Allowed operators are: [ "eq", "ge", "le", "gt", "lt", "neq", "like", "in", "or" ]

    :param dict search_terms: A dictionary of column names and search parameters: operator, value.
    :return: A request object
    """

    try:
        # Convert the dictionary to JSON for the url query string.
        for query_key, query_value in search_terms.items():
            search_terms[ query_key ] = json.dumps( query_value )
        drupal_api_key_parameter = 'apikey={}'.format( current_app.config[ 'ULTSYS_API_KEY' ] )
        url_with_api_key = '{}?{}'\
            .format( current_app.config[ 'ULTSYS_USER_SEARCH_SERVICE' ], drupal_api_key_parameter )
        headers = { 'content-type': 'application/json', 'Cache-Control': 'no-cache' }
        request = requests.get( url_with_api_key, params=search_terms, headers=headers )
        return request
    except:
        raise UltsysUserGetUserPathError()


def sort_ultsys_user( ultsys_user_data, sort_terms ):
    """A function that returns a sorted list of dictionaries.

    "sort_terms": [
        { "first_name": "asc" },
        { "city": "desc" }
    ]

    :param list ultsys_user_data: An unsorted list of ultsys users dictionaries.
    :param dict sort_terms: A dictionary of sort parameters: column name and sort direction.
    :return: A sorted list of ultsys user dictionaries.
    """

    if ultsys_user_data:
        for sort_term in reversed( sort_terms ):
            for column_name, sort_direction in sort_term.items():
                reverse = False
                if sort_direction == 'desc':
                    reverse = True

                ultsys_user_data = sorted(
                    ultsys_user_data,
                    key=itemgetter( column_name ),
                    reverse=reverse
                )
    return ultsys_user_data


def raise_error( request ):
    """Check response for codes."""

    if request.status_code == 400:
        raise UltsysUserBadRequestError
    if request.status_code == 404:
        raise UltsysUserNotFoundError
    if request.status_code == 500:
        raise UltsysUserInternalServerError
    if request.status_code != 200:
        raise UltsysUserHTTPStatusCodeError( request.text )
